项目管理过程中，有两个重要的问题。一个是项目进度的管理，一个是代码质量的管理。

这几天，我写了一个java的工具PMHelper，利用网上开放的各种API接口，实现svn/email/findbugs各工具的综合应用。
PMHelper想要解决的问题：
当某些同学有代码提交时，我想要快速了解，是否需要关注；
当某个关键文件被修改时，我想要快速了解，是否正确；
当某个新功能开发，某个包路径下的文件有被修改时，我想要快速了解，进度如何；
当大家文件提交后，代码质量如何，是否通过了FindBugs的检测处理；
可以利用它对团队中新人/关键功能开发者/关键文件修改等的及时反馈。

PMHelper目前大体上分为三个模块，svn监控/邮件发送/FindBugs处理，各模块独立运作。后续，我们期望在代码质量上，引入更多。如PMD/CheckStyle，只要是开源的或提供有开发工具包，都可以集成进来。在未来，还期望可以将自动化集成测试结合起来，提交后，自动打包安装并进行单元测试。每个步骤都有可代替工具，来进行集成。

下面是各模块的大概流程介绍：
svn监控过程；
svn监控，是利用已有的svnkit及系列相关开发工具包，对svn目录进行changlog检测。根据指定的时间间隔进行svn信息获取。将获取到的信息，与定制的作者/文件/文件路径等各元素进行比较，提取出感兴趣的log信息后，再通知给指定的用户群体。svn监控过程，内存占用很小，不会妨碍正常电脑使用。若设定间隔是10min，则一个脚本运行后，n个项目，则启动n个监控线程，定时10min获取一次log信息，资源占用较小。

邮件发送过程；
利用开放的javax.mail开发工具包，实现程序直接发送邮件的过程。由于是本机发送，该选项提供配置项较小，默认采用smtp协议。各人可根据需要，配置内网/外网帐号，对应提供端口号/是否需要验证等配置进行邮箱配置。

FindBugs过程；
Findbugs工具的原理，是将字节码与一组已有的缺陷模式集合进行对比从而发现可能的问题。操作对象是编译后的字节码文件，因此耗时相对较长。我们现有项目完整Findbugs检测需要3min左右（i3系列，4G内存），通过增量形式的检测，一般一次5-6个文件的提交，15s即可完成检测。同时，这个过程，提供了高度的定制化，各项目/各位同事/各台机器可以根据不同的情况，进行不同的配置。（自行学习FindBugs脚本编写过程）
备注：原有的设计，是希望在每次项目打包结束过程，提供Findbugs处理，但现有项目太大，过程太长，且资源占用大，新生代内存空间几秒内暴涨至1G内存，后放弃。后续可以考虑单独拉一台电脑进行该项处理，并可以实现输出每周/每版本的bug对比效果图，进而进行项目质量监管。

功能使用上，提供了如下的定制性：
1.配置文件的密码进行加密，便于配置文件快速分享；
2.对多个指定分支项目工程，进行监控，n个项目，n个配置文件，一次脚本运行；
3.选择性配置监控，svn文件监控与Findbug监控互不干扰；
4.各模块独立配置可选开关，可单独开启或关闭，并进行不同的接收者/抄送者配置；

期望提供给大家的是，每个人都会有根据自身不同的需求进行配置，每个人的电脑既是客户端，又是服务器端。既可以推送信息，又可以接收指定信息。
团队中使用的越多，监控过程越细致，单机运作压力也就越小。

FindBugs的结果，各团队根据需要，可以列入KPI考核计划中去。
工具只是辅助，更多还是要大家去使用，去监管。

使用办法：
将PMHelper1.0.jar或脚本与property放在一个目录下，剩下的工作，全部在property中配置即可。注意property的命名规则为，以monitor_为前缀，以property为后缀。
